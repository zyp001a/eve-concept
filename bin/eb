#!/usr/bin/env python
import pymongo
import sys
import re
import os.path
from pymongo import MongoClient
client = MongoClient('localhost', 27017)
db = client.eve_dic
wcmap = db.word_concept_map
wdcmap = db.word_dependent_concept_map
codemap = db.code_concepts_map
cdef = db.concept_definition
codedef = db.code_definition
stat = db.status


if len(sys.argv) < 2: 
    sys.stderr.write('Usage:' + sys.argv[0] + ' operation\n')
    sys.exit(1)
op = sys.argv[1]

if op == "init":
    if "eve_dic" in client.database_names():
        client.drop_database("eve_dic");
    cdef.ensure_index( "name", direction = None, unique = True)
    stat.insert({
        "next_concept":1,
        "next_code":1}
    );
    sys.exit(0)
elif op == "export":
    pass;
    
if len(sys.argv) < 3:
    sys.stderr.write('Usage:' + sys.argv[0] + ' operation\n')
    sys.exit(1)


if op == "search":
    words=sys.argv[2:]
    cslist=[]
    for word in words:
        cs=[x["concept"] for x in list(wcmap.find({"_id":word}))];
        if len(cs)>0:
            cslist.append(cs);
        else:
            sys.stderr.write(word + ': word not exist, ignored\n');
    if len(words) == 1:

        for c in cslist[0]:
            c_entry=cdef.find_one({"_id":c});
            print c_entry["name"] + ': ' + c_entry["definition"] 
        
    else:
        code_count={}
        i=0;
        for cs in cslist:
            i+=1;
            for cs2 in cslist[i:]:
                for c in cs:
                    for c2 in cs2:
                        if c > c2: c, c2 = c2, c
                        code_ids = [x["_id"] for x in list(codemap.find({
                            "concept": c,
                            "concept2": c2
                        }))]
                    for code_id in code_ids:
                        if not code_id in code_count:
                            code_count[code_id]=1;
                        else:
                            code_count[code_id]+=1;
                            
        for code_id in sorted(code_count, key=code_count.get, reverse = True):
            code_entry=codedef.find_one({"_id":code_id})
            print "//"+str(code_entry["_id"])
            print code_entry["code"];

elif op == "add":
    if len(sys.argv)==3:
        sys.stderr.write('Usage:' + sys.argv[0] + ' add concept definition\n');
        sys.exit(1)
    word = sys.argv[2];
    cname=sys.argv[3];
    concept_entry=cdef.find_one({"name":cname});
    if concept_entry:     
        concept = concept_entry["_id"]
        if len(sys.argv) >4:
            dcs=sys.argv[4:]
            for dc in dcs:
                dc_entry=cdef.find_one({"name":dc});
                if not dc_entry:
                    sys.stderr.write(dc + ': concept not exist\n');
                    sys.exit(1)        
                wdcmap_entry = {
                    "_id": word,
                    "concept": concept,
                    "dependency": dc_entry["_id"]
                }
                wdcmap.update(wdcmap_entry, wdcmap_entry, upsert=True);
        else:
            wcmap_entry = {
                "_id": word,
                "concept": concept
            };
            wcmap.update(wcmap_entry, wcmap_entry, upsert=True);            
    else:
        sys.stderr.write(cname + ': concept not exist\n');
        sys.exit(1)

elif op == "def":
    if len(sys.argv)==3:
        sys.stderr.write('Usage:' + sys.argv[0] + ' add concept definition\n');
        sys.exit(1)

    concept = stat.find_one()["next_concept"];
    word = sys.argv[2];
    defi = sys.argv[3];

    if len(sys.argv)>4:
        #find concept and add to wdcmap
        dcs=sys.argv[4:]
        name = word;
        for dc in dcs:
            dc_entry=cdef.find_one({"name":dc});
            if not dc_entry:
                sys.stderr.write(dc + ': concept not exist\n');
                sys.exit(1)
            name+=dc.capitalize()

            wdcmap_entry = {
                "_id": word,
                "concept": concept,
                "dependency": dc_entry["_id"]
            }
            wdcmap.update(wdcmap_entry, wdcmap_entry, upsert=True);

    else:
        name = word;
        wcmap_entry = {
            "_id": word,
            "concept": concept
        };
        wcmap.update(wcmap_entry, wcmap_entry, upsert=True);

    cdef_find_entry = {
        "name": name
    }
    cdef_update_entry = {
        "_id": concept,
        "name": name,
        "definition": defi
    }
    if not cdef.find_one(cdef_find_entry):
        cdef.insert(cdef_update_entry);
        stat.update({"next_concept":concept}, 
                    {'$set':{"next_concept":concept+1}})
    else:
        cdef.update(cdef_find_entry, cdef_update_entry);

elif op == "code":
    if len(sys.argv)==3:
        sys.stderr.write('Usage:' + sys.argv[0] + 
                         ' addc concept-list (from stdin)\n');
        sys.exit(1)
    cs=sys.argv[2:]
    c_ids=[];
    for c in cs:
        res = cdef.find_one({"name":c});
        if res:
            c_ids.append(res["_id"]);
        else:
            sys.stderr.write(c + ': concept not exist, ignored\n');

    c_ids=sorted(c_ids);

    code_entry = codedef.find_one({"concepts":c_ids})
    code=''
    for line in sys.stdin:
        code+=line

    if code_entry:
       sys.stderr.write('There is already a code based on these concepts\n') 
       sys.stderr.write('code_id: ' + code_entry["_id"] + '\n' + 
                        code_entry["code"] + '\n') 
       sys.exit(1)
    
    code_id = stat.find_one()["next_code"];
    i = 0;
    for c in c_ids:
        i+=1;
        for c2 in c_ids[i:]:
            codemap.insert({
                "_id":code_id,
                "concept":c,
                "concept2":c2
            });
    codedef.insert({
        "_id":code_id, 
        "code":code,
        "concepts":c_ids
     });
     
    stat.update({"next_concept":code_id}, 
                {'$set':{"next_concept":code_id+1}})
elif op == "modify":
    pass;
elif op == "rmc":
    pass;
#post_id = wcmap.insert(post)

